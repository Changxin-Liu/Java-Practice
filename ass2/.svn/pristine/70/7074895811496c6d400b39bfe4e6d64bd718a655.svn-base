package pacman.game;

import pacman.board.BoardItem;
import pacman.board.PacmanBoard;
import pacman.ghost.*;
import pacman.hunter.Hunter;
import pacman.score.ScoreBoard;
import pacman.util.Position;

import java.util.ArrayList;
import java.util.List;

public class PacmanGame {

    private String title;
    private String author;
    private Hunter hunter;
    private PacmanBoard board;

    private int tick;
    private int level;
    private int lives;
    private ScoreBoard scoreBoard;

    private List<Ghost> ghostList;


    public PacmanGame(String title,
                      String author,
                      Hunter hunter,
                      PacmanBoard board){
        this.title = title;
        this.author = author;
        this.hunter = hunter;
        this.board = board;

        hunter.setPosition(board.getPacmanSpawn());
        ghostList = new ArrayList<>();
        ghostList.add(new Blinky());
        ghostList.add(new Clyde());
        ghostList.add(new Inky());
        ghostList.add(new Pinky());


        ghostList.get(0).setPosition(board.getGhostSpawn());
        ghostList.get(1).setPosition(board.getGhostSpawn());
        ghostList.get(2).setPosition(board.getGhostSpawn());
        ghostList.get(3).setPosition(board.getGhostSpawn());

        this.tick = 0;
        this.level = 0;
        this.lives = 4;
        scoreBoard = new ScoreBoard();
    }

    public String getTitle(){
        return this.title;
    }

    public String getAuthor(){
        return this.author;
    }

    public PacmanBoard getBoard(){
        return this.board;
    }

    public int getTick(){
        return this.tick;
    }

    public ScoreBoard getScores(){
        return this.scoreBoard;
    }

    public int getLevel(){
        return this.level;
    }

    public void setLevel(int level){
        this.level = level;
    }

    public int getLives(){
        return this.lives;
    }

    public void setLives(int lives){
        this.lives = lives;
    }

    public Hunter getHunter(){
        return this.hunter;
    }

    public List<Ghost> getGhosts(){
        Blinky tempBlinky = new Blinky();
        Clyde tempClyde = new Clyde();
        Inky tempInky = new Inky();
        Pinky tempPinky = new Pinky();
        List<Ghost> ghostList = new ArrayList<>();
        ghostList.add(tempBlinky);
        ghostList.add(tempClyde);
        ghostList.add(tempInky);
        ghostList.add(tempPinky);
        return ghostList;
    }

    public void tick(){
        if (this.getLives() != 0){
            getHunter().move(this);

            for (Ghost ghost : getGhosts()) {
                getHunter().hit(ghost);

                if (!ghost.isDead()){
                    if (getTick() % 2 == 0) {
                        ghost.move(this);
                    }
                    getHunter().hit(ghost);
                }else {
                    ghost.reset();
                    ghost.setPosition(getBoard().getGhostSpawn());
                    getScores().increaseScore(200);
                }
            }

            if (getHunter().isDead()){
                this.lives -= 1;
                resetEntities();
            }

            if (isBoardEmpty()){
                level += 1;
                tick = 0;
                resetEntities();
            }else {
                tick += 1;
            }


        }
    }

    public void reset(){
        this.lives = 4;
        this.level = 0;
        scoreBoard.reset();
        board.reset();

        resetEntities();

        this.tick = 0;
    }

    public void setGhostsFrightened(){
        for (int i = 0; i < ghostList.size(); i++){
            ghostList.get(i).setPhase(Phase.FRIGHTENED,Phase.FRIGHTENED.getDuration());
        }
    }

    private boolean isBoardEmpty(){
        for (int x = 0; x < getBoard().getWidth(); x++){
            for (int y = 0; y < getBoard().getHeight(); y++){
                BoardItem item = getBoard().getEntry(new Position(x,y));
                if (item == BoardItem.DOT
                        || item == BoardItem.BIG_DOT){
                    return false;
                }
            }
        }
        return true;
    }

    private void resetEntities(){
        getHunter().reset();
        getHunter().setPosition(getBoard().getPacmanSpawn());
        for (Ghost ghost : getGhosts()) {
            ghost.reset();
            ghost.setPosition(getBoard().getGhostSpawn());
        }
    }
}
