package pacman.game;

import pacman.ghost.Ghost;
import pacman.ghost.GhostType;
import pacman.util.Position;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.List;

public class GameWriter {


    private String boardColumns;
    private String boardRows;

    public GameWriter(){

    }

    public static void write(Writer writer, PacmanGame game)
            throws IOException{

        BufferedWriter bufferedWriter = new BufferedWriter(writer);

        String boardString = getBoardString(game);
        String gameString = getGameString(game);
        String scoreString = getScoreString(game);

        try {
            bufferedWriter.write(boardString);
            bufferedWriter.newLine();
            bufferedWriter.newLine();
            bufferedWriter.write(gameString);
            bufferedWriter.newLine();
            bufferedWriter.newLine();
            bufferedWriter.write(scoreString);

        } catch (IOException e){
            throw new IOException();
        } finally {
            try {
                bufferedWriter.flush();
            }catch (IOException e){
                System.err.println("Error closing file");
            }
        }

    }

    private static String getBoardString(PacmanGame game){

        String boardTag = "[Board]";
        int boardColumns = game.getBoard().getWidth();
        int boardRows = game.getBoard().getHeight();
        String boardSize = new Position(boardColumns,boardRows).toString();
        String boardMap = game.getBoard().toString();

        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(boardTag);
        stringBuilder.append(System.lineSeparator());
        stringBuilder.append(boardSize);
        stringBuilder.append(System.lineSeparator());
        stringBuilder.append(boardMap);

        return stringBuilder.toString();
    }

    private static String getGameString(PacmanGame game){

        StringBuilder stringBuilder = new StringBuilder();

        String blinkyToString = null;
        String inkyToString = null;
        String pinkyToString = null;
        String clydeToString = null;

        for (Ghost ghost : game.getGhosts()) {
            if (ghost.getType() == GhostType.BLINKY){
                blinkyToString = ghost.toString();
            }else if (ghost.getType() == GhostType.INKY){
                inkyToString = ghost.toString();
            }else if (ghost.getType() == GhostType.PINKY){
                pinkyToString = ghost.toString();
            }else if (ghost.getType() == GhostType.CLYDE){
                clydeToString = ghost.toString();
            }
        }

        String gameTag = "[Game]";
        String title = "title = " + game.getTitle();
        String author = "author = " + game.getAuthor();
        String lives = "lives = " + game.getLives();
        String level = "level = " + game.getLevel();
        String score = "score = " + game.getScores().getScore();
        String hunter = "hunter = " + game.getHunter().toString();
        String blinky = "blinky = " + blinkyToString;
        String inky = "inky = " + inkyToString;
        String pinky = "pinky = " + pinkyToString;
        String clyde = "clyde = " + clydeToString;

        stringBuilder.append(gameTag);
        stringBuilder.append(System.lineSeparator());
        stringBuilder.append(title);
        stringBuilder.append(System.lineSeparator());
        stringBuilder.append(author);
        stringBuilder.append(System.lineSeparator());
        stringBuilder.append(lives);
        stringBuilder.append(System.lineSeparator());
        stringBuilder.append(level);
        stringBuilder.append(System.lineSeparator());
        stringBuilder.append(score);
        stringBuilder.append(System.lineSeparator());
        stringBuilder.append(hunter);
        stringBuilder.append(System.lineSeparator());
        stringBuilder.append(blinky);
        stringBuilder.append(System.lineSeparator());
        stringBuilder.append(inky);
        stringBuilder.append(System.lineSeparator());
        stringBuilder.append(pinky);
        stringBuilder.append(System.lineSeparator());
        stringBuilder.append(clyde);
        return stringBuilder.toString();
    }

    private static String getScoreString(PacmanGame game) {

        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("[Scores]");
        stringBuilder.append(System.lineSeparator());

        List<String> list = game.getScores().getEntriesByName();

        for (String entry : list) {
            stringBuilder.append(entry);
            stringBuilder.append(System.lineSeparator());
        }

        return stringBuilder.toString().trim();
    }
}
